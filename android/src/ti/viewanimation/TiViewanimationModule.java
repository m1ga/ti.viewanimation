/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.viewanimation;

import android.animation.ValueAnimator;

import com.daimajia.androidanimations.library.Techniques;
import com.daimajia.androidanimations.library.YoYo;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;

import java.util.HashMap;

import ti.modules.titanium.ui.ViewProxy;


@Kroll.module(name="TiViewanimation", id="ti.viewanimation")
public class TiViewanimationModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiViewanimationModule";
	private static final boolean DBG = TiConfig.LOGD;

	@Kroll.constant public static final int FLASH = 1;
	@Kroll.constant public static final int PULSE = 2;
	@Kroll.constant public static final int RUBBERBAND = 3;
	@Kroll.constant public static final int SHAKE = 4;
	@Kroll.constant public static final int SWING = 5;
	@Kroll.constant public static final int WOBBLE = 6;
	@Kroll.constant public static final int BOUNCE = 7;
	@Kroll.constant public static final int TADA = 8;
	@Kroll.constant public static final int STANDUP = 9;
	@Kroll.constant public static final int WAVE = 10;
	@Kroll.constant public static final int HINGE = 11;
	@Kroll.constant public static final int ROLLIN = 12;
	@Kroll.constant public static final int ROLLOUT = 13;
	@Kroll.constant public static final int LANDING = 14;
	@Kroll.constant public static final int TAKINGOFF = 15;
	@Kroll.constant public static final int DROPOUT = 16;
	@Kroll.constant public static final int BOUNCEIN = 17;
	@Kroll.constant public static final int BOUNCEINDOWN = 18;
	@Kroll.constant public static final int BOUNCEINLEFT = 19;
	@Kroll.constant public static final int BOUNCEINRIGHT = 20;
	@Kroll.constant public static final int BOUNCEINUP = 21;
	@Kroll.constant public static final int FADEIN = 22;
	@Kroll.constant public static final int FADEINUP = 23;
	@Kroll.constant public static final int FADEINDOWN = 24;
	@Kroll.constant public static final int FADEINLEFT = 25;
	@Kroll.constant public static final int FADEINRIGHT = 26;
	@Kroll.constant public static final int FADEOUTDOWN = 27;
	@Kroll.constant public static final int FADEOUTLEFT = 28;
	@Kroll.constant public static final int FADEOUTRIGHT = 29;
	@Kroll.constant public static final int FADEOUTUP = 30;
	@Kroll.constant public static final int FLIPINX = 31;
	@Kroll.constant public static final int FLIPOUTX = 32;
	@Kroll.constant public static final int FLIPOUTY = 33;
	@Kroll.constant public static final int ROTATEIN = 34;
	@Kroll.constant public static final int ROTATEINDOWNLEFT = 35;
	@Kroll.constant public static final int ROTATEINDOWNRIGHT = 36;
	@Kroll.constant public static final int ROTATEINUPLEFT = 37;
	@Kroll.constant public static final int ROTATEINUPRIGHT = 38;
	@Kroll.constant public static final int ROTATEOUTDOWNLEFT = 39;
	@Kroll.constant public static final int ROTATEOUTDOWNRIGHT = 40;
	@Kroll.constant public static final int ROTATEOUTUPLEFT = 41;
	@Kroll.constant public static final int ROTATEOUTUPRIGHT = 42;
	@Kroll.constant public static final int SLIDEINLEFT = 43;
	@Kroll.constant public static final int SLIDEINRIGHT = 44;
	@Kroll.constant public static final int SLIDEINUP = 45;
	@Kroll.constant public static final int SLIDEINDOWN = 46;
	@Kroll.constant public static final int SLIDEOUTLEFT = 47;
	@Kroll.constant public static final int SLIDEOUTRIGHT = 48;
	@Kroll.constant public static final int SLIDEOUTUP = 49;
	@Kroll.constant public static final int SLIDEOUTDOWN = 50;
	@Kroll.constant public static final int ZOOMIN = 51;
	@Kroll.constant public static final int ZOOMINDOWN = 52;
	@Kroll.constant public static final int ZOOMINLEFT = 53;
	@Kroll.constant public static final int ZOOMINRIGHT = 54;
	@Kroll.constant public static final int ZOOMINUP = 55;
	@Kroll.constant public static final int ZOOMOUTDOWN = 56;
	@Kroll.constant public static final int ZOOMOUTLEFT = 57;
	@Kroll.constant public static final int ZOOMOUTRIGHT = 58;
	@Kroll.constant public static final int ZOOMOUTUP = 59;

	@Kroll.constant public static final int REPEAT_RESTART = ValueAnimator.RESTART;
	@Kroll.constant public static final int REPEAT_REVERSE = ValueAnimator.REVERSE;

	public TiViewanimationModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) { }

	// Methods
	@Kroll.method
	public TiAnimationProxy animate(HashMap options)  {
		ViewProxy view = (ViewProxy) options.get("view");
		int duration = TiConvert.toInt(options.get("duration"), 500);
		int repeat = TiConvert.toInt(options.get("repeat"), 0);
		int type = TiConvert.toInt(options.get("type"), 0);
		int delay = TiConvert.toInt(options.get("delay"), 0);
		int repeatMode = TiConvert.toInt(options.get("repeatMode"), REPEAT_RESTART);
		Techniques tec = null;

		if (type == 1) tec = Techniques.Flash;
		if (type == 2) tec = Techniques.Pulse;
		if (type == 3) tec = Techniques.RubberBand;
		if (type == 4) tec = Techniques.Shake;
		if (type == 5) tec = Techniques.Swing;
		if (type == 6) tec = Techniques.Wobble;
		if (type == 7) tec = Techniques.Bounce;
		if (type == 8) tec = Techniques.Tada;
		if (type == 9) tec = Techniques.StandUp;
		if (type == 10) tec = Techniques.Wave;
		if (type == 11) tec = Techniques.Hinge;
		if (type == 12) tec = Techniques.RollIn;
		if (type == 13) tec = Techniques.RollOut;
		if (type == 14) tec = Techniques.Landing;
		if (type == 15) tec = Techniques.TakingOff;
		if (type == 16) tec = Techniques.DropOut;
		if (type == 17) tec = Techniques.BounceIn;
		if (type == 18) tec = Techniques.BounceInDown;
		if (type == 19) tec = Techniques.BounceInLeft;
		if (type == 20) tec = Techniques.BounceInRight;
		if (type == 21) tec = Techniques.BounceInUp;
		if (type == 22) tec = Techniques.FadeIn;
		if (type == 23) tec = Techniques.FadeInUp;
		if (type == 24) tec = Techniques.FadeInDown;
		if (type == 25) tec = Techniques.FadeInLeft;
		if (type == 26) tec = Techniques.FadeInRight;
		if (type == 27) tec = Techniques.FadeOutDown;
		if (type == 28) tec = Techniques.FadeOutLeft;
		if (type == 29) tec = Techniques.FadeOutRight;
		if (type == 30) tec = Techniques.FadeOutUp;
		if (type == 31) tec = Techniques.FlipInX;
		if (type == 32) tec = Techniques.FlipOutX;
		if (type == 33) tec = Techniques.FlipOutY;
		if (type == 34) tec = Techniques.RotateIn;
		if (type == 35) tec = Techniques.RotateInDownLeft;
		if (type == 36) tec = Techniques.RotateInDownRight;
		if (type == 37) tec = Techniques.RotateInUpLeft;
		if (type == 38) tec = Techniques.RotateInUpRight;
		if (type == 39) tec = Techniques.RotateOutDownLeft;
		if (type == 40) tec = Techniques.RotateOutDownRight;
		if (type == 41) tec = Techniques.RotateOutUpLeft;
		if (type == 42) tec = Techniques.RotateOutUpRight;
		if (type == 43) tec = Techniques.SlideInLeft;
		if (type == 44) tec = Techniques.SlideInRight;
		if (type == 45) tec = Techniques.SlideInUp;
		if (type == 46) tec = Techniques.SlideInDown;
		if (type == 47) tec = Techniques.SlideOutLeft;
		if (type == 48) tec = Techniques.SlideOutRight;
		if (type == 49) tec = Techniques.SlideOutUp;
		if (type == 50) tec = Techniques.SlideOutDown;
		if (type == 51) tec = Techniques.ZoomIn;
		if (type == 52) tec = Techniques.ZoomInDown;
		if (type == 53) tec = Techniques.ZoomInLeft;
		if (type == 54) tec = Techniques.ZoomInRight;
		if (type == 55) tec = Techniques.ZoomInUp;
		if (type == 56) tec = Techniques.ZoomOutDown;
		if (type == 57) tec = Techniques.ZoomOutLeft;
		if (type == 58) tec = Techniques.ZoomOutRight;
		if (type == 59) tec = Techniques.ZoomOutUp;

		YoYo.YoYoString animation = null;
		if (tec != null) {
			animation = YoYo.with(tec)
					.duration(duration)
					.repeat(repeat)
					.delay(delay)
					.repeatMode(repeatMode)
					.pivot(YoYo.CENTER_PIVOT, YoYo.CENTER_PIVOT)
					.onEnd(animator -> {
						fireEvent("done", new KrollDict());
					})
					.onCancel(animator -> {
						fireEvent("cancel", new KrollDict());
					})
					.onStart(animator -> {
						fireEvent("start", new KrollDict());
					})
					.playOn(view.getOrCreateView().getNativeView());
		}

		TiAnimationProxy tiAnimation = new TiAnimationProxy(animation);
		return tiAnimation;
	}
}
